buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url = 'https://dist.creeper.host/Sponge/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.0.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'org.spongepowered.mixin'

version = "${minecraft_version}-${mod_version}"
group = "noobanidus.libs"
archivesBaseName = "noobutil"

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer_noobutil.cfg')

    runs {
        client {
            taskName 'runClient'

            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'CORE,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod {
                    source sourceSets.main
                }
            }
        }

        server {
            taskName 'runServer'

            workingDirectory project.file('run')

            //property 'forge.logging.markers', 'CORE,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod {
                    source sourceSets.main
                }
            }
        }

        data {
            taskName 'runData'

            workingDirectory project.file('run')

            environment 'target', 'fmluserdevdata'

            //property 'forge.logging.markers', 'CORE,REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                testmod {
                    source sourceSets.main
                }
            }

            args '--mod', 'testmod', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"',
                    '--existing', '"' + rootProject.file('src/main/resources') + '"'
//, '--existing', '"' + rootProject.file('src/generated/resources') + '"'

        }
    }
}

repositories {
    maven {
        url "http://maven.tterrag.com/"
    }
    maven { url = 'https://repo.spongepowered.org/maven/' }

    maven { url = 'https://dist.creeper.host/Sponge/maven' }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compile fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")

    compile 'org.spongepowered:mixin:0.8'
    annotationProcessor 'org.spongepowered:mixin:0.8:processor'
}

jar {
    exclude('assets/**', 'data/**', '.cache/**') // Exclude generated assets, can't find a better way to do this :(
    manifest {
        attributes(
                'FMLModType': 'LIBRARY',
                "Specification-Title": "noobutil",
                "Specification-Vendor": "noobanidus",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor": "noobanidus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
    }
}

processResources {
    exclude("META-INF")
}

task sourcesJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    description = 'Creates a JAR containing the non-obfuscated compiled code.'
    from sourceSets.main.output
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

publishing {

    publications {

        mavenJava(MavenPublication) {

            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java

            // Allows the maven pom file to be modified.
            pom.withXml {

                // Go through all the dependencies.
                asNode().dependencies.dependency.each { dep ->

                    println 'Surpressing artifact ' + dep.artifactId.last().value().last() + ' from maven dependencies.'
                    assert dep.parent().remove(dep)
                }
            }

            artifact sourcesJar {

                classifier 'sources'
            }
            artifact deobfJar {

                classifier 'deobf'
            }
        }
    }

    repositories {

        maven {

            url "file://" + System.getenv("local_maven")
        }
    }
}
